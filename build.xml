<?xml version="1.0" encoding="UTF-8"?>
<project name="jRAT" default="dist" basedir=".">
    <description>Builds, tests, and runs the project jRAT.</description>
    <property name="app.name" value="jrat" />
    <property name="root.dir" value="${basedir}"/>
    <property name="src.dir" value="src"/>
    <property name="lib.dir" value="lib"/>
    <property name="dist.dir" value="dist"/>
    <property name="build.dir" value="build"/>
    <property name="build.test.dir" value="${build.dir}/test"/>
    <property name="build.coverage.dir" value="${build.dir}/coverage"/>
    <property name="build.instrument.dir" value="${build.dir}/instrument"/>
    <property name="build.classes.dir" value="${build.dir}/classes"/>
    <property name="compile.debug" value="true"/>
    <property name="compile.includeAntRuntime" value="no"/>
    <property name="compile.optimize" value="true"/>
    <property name="javadocs.dir" value="docs"/>
    <property name="javadocs.src.dir" value="${src.dir}/pl/imgw/jrat"/>
    <property name="test.dir" value="test"/>
    <property name="build.test.dir" value="${build.dir}/test"/>

    <path id="classpath">
        <fileset dir="${lib.dir}" includes="**/*.jar"/>
    </path>

    <target name="init">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.classes.dir}"/>
        <mkdir dir="${dist.dir}"/>
    </target>
    
    <target name="compile" depends="init">
      <javac srcdir="${src.dir}" deprecation="on"
             destdir="${build.classes.dir}" classpathref="classpath"/>
    </target>

    <target name="dist" depends="compile">
        <jar jarfile="${dist.dir}/${app.name}.jar"
            basedir="${build.classes.dir}">
            <zipgroupfileset dir="${lib.dir}" includes="**/*.jar"/>    
        </jar>
    </target>

    <!-- Compiles tests -->
    <target name="compile.test" depends="init,compile">
        <mkdir dir="${build.dir}/test"/>
        <javac srcdir="${root.dir}/${test.dir}"
            encoding="8859_1"
            deprecation="on"
            debug="${compile.debug}"
            includeAntRuntime="${compile.includeAntRuntime}"
            optimize="${compile.optimize}"
            destdir="${build.test.dir}" classpathref="classpath">
            <classpath location="${build.classes.dir}"/>
            <classpath refid="classpath"/>
        </javac>
    </target>
    <!-- Executes tests -->
    <target name="execute.test">
        <mkdir dir="${dist.dir}/junit-reports" />
        <junit showoutput="true" forkmode="perBatch" printsummary="no" >
            <jvmarg line="-Dnative.libpath=${lib.dir}/cisd-jhdf5/lib/native -Xmx512m -XX:MaxPermSize=512m"/>
            <formatter type="xml"/>
	   		<formatter type="brief" usefile="false" />
            <classpath location="${build.classes.dir}"/>
            <classpath refid="classpath"/>
            <classpath location="${build.test.dir}"/>
            <batchtest fork="yes" todir="${dist.dir}/junit-reports">
                <fileset dir="${build.test.dir}" includes="**/*Test.class"/>
            </batchtest>
        </junit>
    </target>
    <!-- Runs actual tests -->
    <target name="test" depends="compile.test,execute.test"/>


	<!-- CODE COVERAGE -->
	<target name="instrument.coverage">
		<delete dir="${build.instrument.dir}" />
    	<delete file="${build.coverage.dir}/coverage.ec" />
    	<delete file="${build.coverage.dir}/metadata.emma" />
    	<mkdir dir="${build.instrument.dir}" />
    	<mkdir dir="${build.coverage.dir}" />

		<emma enabled="true">
		<instr instrpath="${build.classes.dir}/"
             destdir="${build.instrument.dir}/"	
             metadatafile="${build.coverage.dir}/metadata.emma"
             merge="true"/>
    	</emma>
  	</target>
  
  	<target name="test.coverage" depends="instrument.coverage">
    	<mkdir dir="${dist.dir}/coverage-reports" />
    	 <junit showoutput="true" forkmode="perBatch" printsummary="no" >
            <jvmarg line="-Dnative.libpath=${lib.dir}/cisd-jhdf5/lib/native -Xmx512m -XX:MaxPermSize=512m"/>
            <sysproperty key="emma.coverage.out.file" file="${build.coverage.dir}/coverage.ec" /> <!-- So I know where ec file is placed -->
            <formatter type="xml"/>
	   		<formatter type="brief" usefile="false" />
	   		<classpath location="${build.instrument.dir}" /> <!-- For instrumentation -->
            <classpath location="${build.classes.dir}"/>
            <classpath refid="classpath"/>
            <classpath location="${build.test.dir}"/>
            <classpath refid="emma.classpath" />
            <batchtest fork="yes" todir="${dist.dir}/junit-reports">
                <fileset dir="${build.test.dir}" includes="**/*Test.class"/>
            </batchtest>
        </junit>

  		<emma enabled="true">
      		<report sourcepath="${source.dir}" >
        		<fileset dir="${build.coverage.dir}" >
          			<include name="*.emma" />
          			<include name="*.ec" />
        		</fileset>
      			<xml outfile="${dist.dir}/coverage-reports/coverage.xml" depth="method"/>
      		</report>
    	</emma>
  	</target>

    <target name="clean">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
        <delete dir="${javadocs.dir}"/>
    </target>
    <!-- Generate source code documentation -->
    <target name="javadocs">
        <mkdir dir="${javadocs.dir}"/>
        <javadoc sourcepath="${src.dir}" destdir="${javadocs.dir}"
            classpath="${src.dir}" author="true" version="true"
            use="true" windowtitle="${app.name} API"
            doctitle="&lt;h1&gt;${app.name}&lt;/h1&gt;">
            <fileset dir="${javadocs.src.dir}">
                <include name="**/*.java"/>
            </fileset>
         </javadoc>
    </target>
</project>


